{"version":3,"sources":["webpack:///./src/pages/about.js","webpack:///./.cache/gatsby-browser-entry.js","webpack:///./src/components/layout.js","webpack:///./.cache/public-page-renderer.js","webpack:///./.cache/public-page-renderer-prod.js"],"names":["props","useEffect","console","log","data","site","siteMetadata","about","query","loader","enqueue","React","createContext","PropTypes","object","string","isRequired","func","ListLink","style","display","marginRight","to","children","margin","maxWidth","padding","marginBottom","textShadow","backgroundImage","title","listStyle","float","m","module","exports","require","ProdPageRenderer","location","pageResources","createElement","InternalPageRenderer","json","propTypes","shape","pathname"],"mappings":"6FAAA,qFAIe,mBAACA,GAKZ,OAJAC,qBAAU,WACNC,QAAQC,IAAIH,MAIZ,YAAC,IAAD,KACI,kCACA,qBAAIA,EAAMI,KAAKC,KAAKC,aAAaC,SAoBtC,IAAMC,EAAK,a,iPClBOC,UAAOC,QAELC,IAAMC,cAAc,IAuDvCC,IAAUC,OACTD,IAAUE,OAAOC,WAChBH,IAAUI,KACRJ,IAAUI,KCvEtB,IAAMC,EAAW,SAAAlB,GAAK,OAClB,kBAAImB,MAAO,CAAEC,QAAQ,eAAiBC,YAAY,SAC9C,YAAC,IAAD,CAAMC,GAAItB,EAAMsB,IAAKtB,EAAMuB,YAIpB,gBAAmB,IAAhBA,EAAe,EAAfA,SACRnB,EAAI,OASV,OACI,mBAAKe,MAAO,CAAEK,OAAO,YAAcC,SAAU,IAAKC,QAAQ,WACtD,sBAAQP,MAAO,CAAEQ,aAAa,WAC1B,YAAC,IAAD,CAAML,GAAG,IAAIH,MAAO,CAAES,WAAW,OAASC,gBAAgB,SACtD,kBAAIV,MAAO,CAAEC,QAAQ,WAAchB,EAAKC,KAAKC,aAAawB,QAE9D,kBAAIX,MAAO,CAAEY,UAAU,OAASC,MAAA,UAC5B,YAAC,EAAD,CAAUV,GAAG,KAAb,QACA,YAAC,EAAD,CAAUA,GAAG,WAAb,SACA,YAAC,EAAD,CAAUA,GAAG,aAAb,WACA,YAAC,EAAD,CAAUA,GAAG,iBAAb,YAGPC,K,qBChCb,IAAsBU,EAKpBC,EAAOC,SALaF,EAKWG,EAAQ,UALRH,EAAC,SAAaA,G,sVCK/C,IAAMI,EAAmB,SAAC,GAAiC,IAA/BC,EAA8B,EAA9BA,SAAUC,EAAoB,EAApBA,cACpC,OAAKA,EAGE5B,IAAM6B,cAAcC,I,iWAApB,EACLH,WACAC,iBACGA,EAAcG,OALV,MASXL,EAAiBM,UAAY,CAC3BL,SAAUzB,IAAU+B,MAAM,CACxBC,SAAUhC,IAAUE,OAAOC,aAC1BA,YAGUqB","file":"component---src-pages-about-js-8dc22730a2c4539d3415.js","sourcesContent":["import React, { useEffect } from 'react';\r\nimport Layout from '../components/layout'\r\nimport { graphql } from 'gatsby'\r\n\r\nexport default (props) => {\r\n    useEffect(()=> {\r\n        console.log(props);\r\n    })\r\n    \r\n    return (\r\n        <Layout>\r\n            <h1>About me</h1>\r\n            <p>{props.data.site.siteMetadata.about}</p>\r\n        </Layout>\r\n    )  \r\n}\r\n\r\n// export const query = graphql`\r\n//   {\r\n//     allFile {\r\n//       edges {\r\n//         node {\r\n//           id\r\n//           base\r\n//           accessTime\r\n//           name\r\n//           size\r\n//         }\r\n//       }\r\n//     }\r\n//   }\r\n// `\r\nexport const query = graphql`\r\n  {\r\n      \r\n    site {\r\n      siteMetadata {\r\n        about\r\n        title\r\n      }\r\n      buildTime\r\n    }\r\n  }\r\n`\r\n\r\n// export const query = graphql`\r\n//   query About {\r\n//     site {\r\n//       siteMetadata {\r\n//         title,\r\n//         about\r\n//       }\r\n//     }\r\n//   }\r\n// `","import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport Link, {\n  withPrefix,\n  withAssetPrefix,\n  navigate,\n  push,\n  replace,\n  navigateTo,\n  parsePath,\n} from \"gatsby-link\"\nimport PageRenderer from \"./public-page-renderer\"\nimport loader from \"./loader\"\n\nconst prefetchPathname = loader.enqueue\n\nconst StaticQueryContext = React.createContext({})\n\nfunction StaticQueryDataRenderer({ staticQueryData, data, query, render }) {\n  const finalData = data\n    ? data.data\n    : staticQueryData[query] && staticQueryData[query].data\n\n  return (\n    <React.Fragment>\n      {finalData && render(finalData)}\n      {!finalData && <div>Loading (StaticQuery)</div>}\n    </React.Fragment>\n  )\n}\n\nconst StaticQuery = props => {\n  const { data, query, render, children } = props\n\n  return (\n    <StaticQueryContext.Consumer>\n      {staticQueryData => (\n        <StaticQueryDataRenderer\n          data={data}\n          query={query}\n          render={render || children}\n          staticQueryData={staticQueryData}\n        />\n      )}\n    </StaticQueryContext.Consumer>\n  )\n}\n\nconst useStaticQuery = query => {\n  if (\n    typeof React.useContext !== `function` &&\n    process.env.NODE_ENV === `development`\n  ) {\n    throw new Error(\n      `You're likely using a version of React that doesn't support Hooks\\n` +\n        `Please update React and ReactDOM to 16.8.0 or later to use the useStaticQuery hook.`\n    )\n  }\n  const context = React.useContext(StaticQueryContext)\n  if (context[query] && context[query].data) {\n    return context[query].data\n  } else {\n    throw new Error(\n      `The result of this StaticQuery could not be fetched.\\n\\n` +\n        `This is likely a bug in Gatsby and if refreshing the page does not fix it, ` +\n        `please open an issue in https://github.com/gatsbyjs/gatsby/issues`\n    )\n  }\n}\n\nStaticQuery.propTypes = {\n  data: PropTypes.object,\n  query: PropTypes.string.isRequired,\n  render: PropTypes.func,\n  children: PropTypes.func,\n}\n\nfunction graphql() {\n  throw new Error(\n    `It appears like Gatsby is misconfigured. Gatsby related \\`graphql\\` calls ` +\n      `are supposed to only be evaluated at compile time, and then compiled away. ` +\n      `Unfortunately, something went wrong and the query was left in the compiled code.\\n\\n` +\n      `Unless your site has a complex or custom babel/Gatsby configuration this is likely a bug in Gatsby.`\n  )\n}\n\nexport {\n  Link,\n  withAssetPrefix,\n  withPrefix,\n  graphql,\n  parsePath,\n  navigate,\n  push, // TODO replace for v3\n  replace, // TODO remove replace for v3\n  navigateTo, // TODO: remove navigateTo for v3\n  StaticQueryContext,\n  StaticQuery,\n  PageRenderer,\n  useStaticQuery,\n  prefetchPathname,\n}\n","import React from \"react\"\r\nimport { Link, graphql, useStaticQuery } from \"gatsby\"\r\n\r\nconst ListLink = props => (\r\n    <li style={{ display: `inline-block`, marginRight: `1rem` }}>\r\n        <Link to={props.to}>{props.children}</Link>\r\n    </li>\r\n)\r\n\r\nexport default ({ children }) => {\r\n    const data = useStaticQuery(graphql`\r\n        query {\r\n            site {\r\n                siteMetadata {\r\n                    title\r\n                }\r\n            }\r\n        }\r\n    `)\r\n    return (\r\n        <div style={{ margin: `3rem auto`, maxWidth: 650, padding: `0 1rem` }}>\r\n            <header style={{ marginBottom: `1.5rem` }}>\r\n                <Link to=\"/\" style={{ textShadow: `none`, backgroundImage: `none` }}>\r\n                    <h3 style={{ display: `inline` }}>{data.site.siteMetadata.title}</h3>\r\n                </Link>\r\n                <ul style={{ listStyle: `none`, float: `right` }}>\r\n                    <ListLink to=\"/\">Home</ListLink>\r\n                    <ListLink to=\"/about/\">About</ListLink>\r\n                    <ListLink to=\"/contact/\">Contact</ListLink>\r\n                    <ListLink to=\"/file-system/\">System</ListLink>\r\n                </ul>\r\n            </header>\r\n            {children}\r\n        </div>\r\n    )\r\n}\r\n\r\n// export const query = useStaticQuery(graphql`\r\n//     query {\r\n//         site {\r\n//             siteMetadata {\r\n//                 title\r\n//             }\r\n//         }\r\n//     }\r\n// `)","const preferDefault = m => (m && m.default) || m\n\nif (process.env.BUILD_STAGE === `develop`) {\n  module.exports = preferDefault(require(`./public-page-renderer-dev`))\n} else if (process.env.BUILD_STAGE === `build-javascript`) {\n  module.exports = preferDefault(require(`./public-page-renderer-prod`))\n} else {\n  module.exports = () => null\n}\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\n\nimport InternalPageRenderer from \"./page-renderer\"\n\nconst ProdPageRenderer = ({ location, pageResources }) => {\n  if (!pageResources) {\n    return null\n  }\n  return React.createElement(InternalPageRenderer, {\n    location,\n    pageResources,\n    ...pageResources.json,\n  })\n}\n\nProdPageRenderer.propTypes = {\n  location: PropTypes.shape({\n    pathname: PropTypes.string.isRequired,\n  }).isRequired,\n}\n\nexport default ProdPageRenderer\n"],"sourceRoot":""}